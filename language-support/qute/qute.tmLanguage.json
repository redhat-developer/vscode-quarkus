{
  "name": "Qute",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#cdata"
    },
    {
      "include": "#cdata_old"
    },
    {
      "include": "#parameter_declaration"
    },
    {
      "include": "#templates"
    }
  ],
  "repository": {
    "templates": {
      "patterns": [
        {
          "include": "#section_start_if_tag"
        },
        {
          "include": "#section_start_for_tag"
        },
        {
          "include": "#section_start_case_is_tag"
        },
        {
          "include": "#section_start_default_tag"
        },
        {
          "include": "#section_end_default_tag"
        },
        {
          "include": "#section_start_user_tag"
        },
        {
          "include": "#section_end_user_tag"
        },
        {
          "include": "#double_bracket"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "parameter_declaration": {
      "begin": "({)(@)",
      "beginCaptures": {
				"1": {
					"name": "support.constant.qute"
				},
        "2": {
					"name": "keyword.other.qute"
				}
			},
      "end": "((?<![\\\\])})",
      "endCaptures": {
        "0": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "match": "(?<=\\s)([a-zA-Z0-9_-]+)(?=})",
          "name": "variable.other.qute"
        },
        {
          "match": "[a-zA-Z0-9_-]+",
          "name": "entity.name.namespace"
        },
        {
          "match": "(?<=\\w)[<>]",
          "name": "punctuation.bracket.angle.java"
        },
        {
          "match": "(?<=\\w)\\.",
          "name": "punctuation.separator.java"
        },
        {
          "match": "(?<=[\\s]*),",
          "name": "punctuation.separator.java"
        }
      ]
    },
    "comment": {
      "begin": "{!",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.qute"
        }
      },
      "end": "!}",
      "name": "comment.block.qute"
    },
    "cdata":{
			"begin": "{\\|",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.qute"
				}
			},
			"end": "\\|}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.qute"
				}
			},
			"name": "string.unquoted.cdata.qute"
		},
    "cdata_old":{
			"begin": "{\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.qute"
				}
			},
			"end": "\\]}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.qute"
				}
			},
			"name": "string.unquoted.cdata.qute"
		},
    "section_start_default_tag": {
      "begin": "({)(#)((each|else|eval|include|insert|set|let|with|switch|case|is|when)\\b)",
      "end": "(\\/)?((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "keyword.control"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "include": "#code"
        }
      ]
    },
    "section_end_default_tag": {
      "begin": "({)(\\/)((each|else|else\\sif|eval|for|if|include|insert|set|let|with|switch|case|is|when)\\b)",
      "end": "((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "keyword.control"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.constant.qute"
        }
      }
    },
    "section_start_if_tag": {
      "begin": "({)(#)((if|else\\sif)\\b)",
      "end": "(\\/)?((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "keyword.control"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "match": "[\\(\\)]",
          "name": "punctuation.bracket.round.qute"
        },
        {
          "match": "\\b(gt|ge|lt|le|eq|is|ne|and|or)\\b",
          "name": "keyword.control.qute"
        },
        {
          "match": "\\b(!|>|>=|<|<=|==|!=|&&|\\|\\|)\\b",
          "name": "keyword.operator.qute"
        },
        {
          "include": "#code"
        }
      ]
    },
    "section_start_for_tag": {
      "begin": "({)(#)((for)\\b)",
      "end": "(\\/)?((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "keyword.control"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "match": "\\bin\\b",
          "name": "keyword.control.flow"
        },
        {
          "include": "#code"
        }
      ]
    },
    "section_start_case_is_tag": {
      "begin": "({)(#)((case|is)\\b)",
      "end": "(})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "keyword.control"
        },
        "3": {
          "name": "keyword.control"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "match": "(?<={(#case|#is)\\s+)(gt|ge|lt|le|not|ne|in|ni|!in|>|>=|<|<=|!=)(?=\\s+\\w+)",
          "name": "keyword.operator.qute"
        },
        {
          "include": "#code"
        }
      ]
    },
    "section_start_user_tag": {
      "begin": "({)(#)(\\w+(\\.\\w+)*)",
      "end": "(\\/)?((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "entity.name.function.hash"
        },
        "3": {
          "name": "entity.name.function.identifier"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "include": "#code"
        }
      ]
    },
    "section_end_user_tag": {
      "begin": "({)(\\/)(\\w+(\\.\\w+)*)?\\s*",
      "end": "((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        },
        "2": {
          "name": "entity.name.function.slash"
        },
        "3": {
          "name": "entity.name.function.identifier"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.constant.qute"
        }
      }
    },
    "double_bracket": {
      "match": "{{"
    },
    "expression": {
      "begin": "((?<!\\\\){)(?=\\w)",
      "end": "((?<![\\\\])})",
      "beginCaptures": {
        "1": {
          "name": "support.constant.qute"
        }
      },
      "endCaptures": {
        "1": {
          "name": "support.constant.qute"
        }
      },
      "patterns": [
        {
          "match": "\\b(or|orEmpty)\\b",
          "name": "keyword.control.qute"
        },
        {
          "match": "\\b(&&|\\|\\||\\?:|\\?|:)\\b",
          "name": "keyword.operator.qute"
        },
        {
          "include": "#code"
        }
      ]
    },
    "code": {
      "patterns": [
        {
          "include": "#parens"
        },
        {
          "include": "#constants-and-special-vars"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#lambda-expression"
        },
        {
          "include": "#method-call"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#objects"
        },
        {
          "include": "#properties"
        },
        {
          "include": "#strings"
        },
        {
          "match": ",",
          "name": "punctuation.separator.delimiter.java"
        },
        {
          "match": "\\.",
          "name": "punctuation.separator.period.java"
        },
        {
          "include": "#variable"
        }
      ]
    },
    "variable": {
      "match": "[a-zA-Z_$][a-zA-Z_$0-9]*",
      "name": "variable.other.object.java"
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.java"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.java"
            }
          },
          "name": "string.quoted.double.java",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.java"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.java"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.java"
            }
          },
          "name": "string.quoted.single.java",
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.java"
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "objects": {
      "match": "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)",
      "name": "variable.other.object.java"
    },
    "function-call": {
      "begin": "([A-Za-z_$][\\w$]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.java"
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.bracket.round.java"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.bracket.round.java"
        }
      },
      "name": "meta.function-call.java",
      "patterns": [
        {
          "include": "#code"
        }
      ]
    },
    "method-call": {
      "begin": "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.period.java"
        },
        "2": {
          "name": "entity.name.function.java"
        },
        "3": {
          "name": "punctuation.definition.parameters.begin.bracket.round.java"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.bracket.round.java"
        }
      },
      "name": "meta.method-call.java",
      "patterns": [
        {
          "include": "#code"
        }
      ]
    },
    "lambda-expression": {
      "patterns": [
        {
          "match": "->",
          "name": "storage.type.function.arrow.java"
        }
      ]
    },
    "constants-and-special-vars": {
      "patterns": [
        {
          "match": "\\b(true|false|null)\\b",
          "name": "constant.language.java"
        },
        {
          "match": "\\bthis\\b",
          "name": "variable.language.this.java"
        }
      ]
    },
    "parens": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.bracket.round.java"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.bracket.round.java"
            }
          },
          "patterns": [
            {
              "include": "#code"
            }
          ]
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.bracket.square.java"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.bracket.square.java"
            }
          },
          "patterns": [
            {
              "include": "#code"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.bracket.curly.java"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.bracket.curly.java"
            }
          },
          "patterns": [
            {
              "include": "#code"
            }
          ]
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$][\\w$]*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.period.java"
            },
            "2": {
              "name": "variable.other.object.property.java"
            }
          }
        },
        {
          "match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.period.java"
            },
            "2": {
              "name": "variable.other.property.java"
            }
          }
        },
        {
          "match": "(\\.)\\s*([0-9][\\w$]*)",
          "captures": {
            "1": {
              "name": "punctuation.separator.period.java"
            },
            "2": {
              "name": "constant.numeric.decimal.java"
            }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
          "name": "constant.numeric.hex.java"
        },
        {
          "match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
          "name": "constant.numeric.binary.java"
        },
        {
          "match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
          "name": "constant.numeric.octal.java"
        },
        {
          "match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
          "name": "constant.numeric.decimal.java"
        }
      ]
    }
  },
  "scopeName": "grammar.qute",
  "uuid": "7ba10786-68d6-4715-9a3e-bcbbda9854a1"
}
